import { createEvent as __stencil_createEvent } from "@stencil/core";
import { getConnect as __stencil_getConnect } from "@stencil/core";
import { getContext as __stencil_getContext } from "@stencil/core";
import { getElement as __stencil_getElement } from "@stencil/core";
import { Host as __stencil_Host } from "@stencil/core";
import { h as __stencil_h } from "@stencil/core";
import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from '@stencil/core';
export class ProCard {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        this.button = false;
        this.type = 'button';
        this.disabled = false;
        this.win = __stencil_getContext(this, "window");
    }
    isClickable() {
        return (this.href !== undefined || this.button);
    }
    hostData() {
        return {
            class: {
                'card-disabled': this.disabled,
                'ion-activatable': this.isClickable()
            }
        };
    }
    __stencil_render() {
        const clickable = this.isClickable();
        if (!clickable) {
            return [
                h("slot", null)
            ];
        }
        const { href } = this;
        const TagType = clickable ? (href === undefined ? 'button' : 'a') : 'div';
        const attrs = (TagType === 'button')
            ? { type: this.type }
            : {
                href: this.href,
                rel: this.rel,
                target: this.target
            };
        return (h(TagType, Object.assign({}, attrs, { class: "card-native", disabled: this.disabled }), h("slot", null), clickable && h("pro-ripple-effect", null)));
    }
    render() { return __stencil_h(__stencil_Host, this.hostData(), this.__stencil_render()); }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:pro-card"; }
}
