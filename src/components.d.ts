/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface ProBackdrop {
    'tappable': boolean;
    'visible': boolean;
  }
  interface ProButton {
    'disabled': boolean;
    'href': string | undefined;
    'type': 'submit' | 'reset' | 'button';
  }
  interface ProCard {
    'button': boolean;
    'disabled': boolean;
    'href': string | undefined;
    'rel': string | undefined;
    'target': string | undefined;
    'type': 'submit' | 'reset' | 'button';
  }
  interface ProCheckbox {
    'checked': boolean;
    'disabled': boolean;
    'name': string;
    'value': any | null;
  }
  interface ProCol {
    'offset'?: string;
    'offsetLg'?: string;
    'offsetMd'?: string;
    'offsetSm'?: string;
    'offsetXl'?: string;
    'offsetXs'?: string;
    'pull'?: string;
    'pullLg'?: string;
    'pullMd'?: string;
    'pullSm'?: string;
    'pullXl'?: string;
    'pullXs'?: string;
    'push'?: string;
    'pushLg'?: string;
    'pushMd'?: string;
    'pushSm'?: string;
    'pushXl'?: string;
    'pushXs'?: string;
    'size'?: string;
    'sizeLg'?: string;
    'sizeMd'?: string;
    'sizeSm'?: string;
    'sizeXl'?: string;
    'sizeXs'?: string;
  }
  interface ProComponentDemo {}
  interface ProContent {}
  interface ProFooter {}
  interface ProGrid {
    'fixed': boolean;
  }
  interface ProHeader {}
  interface ProImage {
    'alt'?: string;
    'src': string;
  }
  interface ProInput {
    'label': string;
    'placeholder': string;
    'regex': RegExp;
    'required': boolean;
  }
  interface ProLabel {
    'for': string;
  }
  interface ProList {}
  interface ProModal {
    'dismiss': () => Promise<void>;
    'present': () => Promise<void>;
  }
  interface ProRadio {
    'checked': boolean;
    'disabled': boolean;
    'name': string;
    'value': any | null;
  }
  interface ProRadioGroup {
    'name': string;
    'value': string;
  }
  interface ProRow {}
}

declare global {


  interface HTMLProBackdropElement extends Components.ProBackdrop, HTMLStencilElement {}
  var HTMLProBackdropElement: {
    prototype: HTMLProBackdropElement;
    new (): HTMLProBackdropElement;
  };

  interface HTMLProButtonElement extends Components.ProButton, HTMLStencilElement {}
  var HTMLProButtonElement: {
    prototype: HTMLProButtonElement;
    new (): HTMLProButtonElement;
  };

  interface HTMLProCardElement extends Components.ProCard, HTMLStencilElement {}
  var HTMLProCardElement: {
    prototype: HTMLProCardElement;
    new (): HTMLProCardElement;
  };

  interface HTMLProCheckboxElement extends Components.ProCheckbox, HTMLStencilElement {}
  var HTMLProCheckboxElement: {
    prototype: HTMLProCheckboxElement;
    new (): HTMLProCheckboxElement;
  };

  interface HTMLProColElement extends Components.ProCol, HTMLStencilElement {}
  var HTMLProColElement: {
    prototype: HTMLProColElement;
    new (): HTMLProColElement;
  };

  interface HTMLProComponentDemoElement extends Components.ProComponentDemo, HTMLStencilElement {}
  var HTMLProComponentDemoElement: {
    prototype: HTMLProComponentDemoElement;
    new (): HTMLProComponentDemoElement;
  };

  interface HTMLProContentElement extends Components.ProContent, HTMLStencilElement {}
  var HTMLProContentElement: {
    prototype: HTMLProContentElement;
    new (): HTMLProContentElement;
  };

  interface HTMLProFooterElement extends Components.ProFooter, HTMLStencilElement {}
  var HTMLProFooterElement: {
    prototype: HTMLProFooterElement;
    new (): HTMLProFooterElement;
  };

  interface HTMLProGridElement extends Components.ProGrid, HTMLStencilElement {}
  var HTMLProGridElement: {
    prototype: HTMLProGridElement;
    new (): HTMLProGridElement;
  };

  interface HTMLProHeaderElement extends Components.ProHeader, HTMLStencilElement {}
  var HTMLProHeaderElement: {
    prototype: HTMLProHeaderElement;
    new (): HTMLProHeaderElement;
  };

  interface HTMLProImageElement extends Components.ProImage, HTMLStencilElement {}
  var HTMLProImageElement: {
    prototype: HTMLProImageElement;
    new (): HTMLProImageElement;
  };

  interface HTMLProInputElement extends Components.ProInput, HTMLStencilElement {}
  var HTMLProInputElement: {
    prototype: HTMLProInputElement;
    new (): HTMLProInputElement;
  };

  interface HTMLProLabelElement extends Components.ProLabel, HTMLStencilElement {}
  var HTMLProLabelElement: {
    prototype: HTMLProLabelElement;
    new (): HTMLProLabelElement;
  };

  interface HTMLProListElement extends Components.ProList, HTMLStencilElement {}
  var HTMLProListElement: {
    prototype: HTMLProListElement;
    new (): HTMLProListElement;
  };

  interface HTMLProModalElement extends Components.ProModal, HTMLStencilElement {}
  var HTMLProModalElement: {
    prototype: HTMLProModalElement;
    new (): HTMLProModalElement;
  };

  interface HTMLProRadioElement extends Components.ProRadio, HTMLStencilElement {}
  var HTMLProRadioElement: {
    prototype: HTMLProRadioElement;
    new (): HTMLProRadioElement;
  };

  interface HTMLProRadioGroupElement extends Components.ProRadioGroup, HTMLStencilElement {}
  var HTMLProRadioGroupElement: {
    prototype: HTMLProRadioGroupElement;
    new (): HTMLProRadioGroupElement;
  };

  interface HTMLProRowElement extends Components.ProRow, HTMLStencilElement {}
  var HTMLProRowElement: {
    prototype: HTMLProRowElement;
    new (): HTMLProRowElement;
  };
  interface HTMLElementTagNameMap {
    'pro-backdrop': HTMLProBackdropElement;
    'pro-button': HTMLProButtonElement;
    'pro-card': HTMLProCardElement;
    'pro-checkbox': HTMLProCheckboxElement;
    'pro-col': HTMLProColElement;
    'pro-component-demo': HTMLProComponentDemoElement;
    'pro-content': HTMLProContentElement;
    'pro-footer': HTMLProFooterElement;
    'pro-grid': HTMLProGridElement;
    'pro-header': HTMLProHeaderElement;
    'pro-image': HTMLProImageElement;
    'pro-input': HTMLProInputElement;
    'pro-label': HTMLProLabelElement;
    'pro-list': HTMLProListElement;
    'pro-modal': HTMLProModalElement;
    'pro-radio': HTMLProRadioElement;
    'pro-radio-group': HTMLProRadioGroupElement;
    'pro-row': HTMLProRowElement;
  }
}

declare namespace LocalJSX {
  interface ProBackdrop extends JSXBase.HTMLAttributes<HTMLProBackdropElement> {
    'onIonBackdropTap'?: (event: CustomEvent<void>) => void;
    'tappable'?: boolean;
    'visible'?: boolean;
  }
  interface ProButton extends JSXBase.HTMLAttributes<HTMLProButtonElement> {
    'disabled'?: boolean;
    'href'?: string | undefined;
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface ProCard extends JSXBase.HTMLAttributes<HTMLProCardElement> {
    'button'?: boolean;
    'disabled'?: boolean;
    'href'?: string | undefined;
    'rel'?: string | undefined;
    'target'?: string | undefined;
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface ProCheckbox extends JSXBase.HTMLAttributes<HTMLProCheckboxElement> {
    'checked'?: boolean;
    'disabled'?: boolean;
    'name': string;
    'onProChange'?: (event: CustomEvent<any>) => void;
    'onProStyle'?: (event: CustomEvent<any>) => void;
    'value': any | null;
  }
  interface ProCol extends JSXBase.HTMLAttributes<HTMLProColElement> {
    'offset'?: string;
    'offsetLg'?: string;
    'offsetMd'?: string;
    'offsetSm'?: string;
    'offsetXl'?: string;
    'offsetXs'?: string;
    'pull'?: string;
    'pullLg'?: string;
    'pullMd'?: string;
    'pullSm'?: string;
    'pullXl'?: string;
    'pullXs'?: string;
    'push'?: string;
    'pushLg'?: string;
    'pushMd'?: string;
    'pushSm'?: string;
    'pushXl'?: string;
    'pushXs'?: string;
    'size'?: string;
    'sizeLg'?: string;
    'sizeMd'?: string;
    'sizeSm'?: string;
    'sizeXl'?: string;
    'sizeXs'?: string;
  }
  interface ProComponentDemo extends JSXBase.HTMLAttributes<HTMLProComponentDemoElement> {}
  interface ProContent extends JSXBase.HTMLAttributes<HTMLProContentElement> {}
  interface ProFooter extends JSXBase.HTMLAttributes<HTMLProFooterElement> {}
  interface ProGrid extends JSXBase.HTMLAttributes<HTMLProGridElement> {
    'fixed'?: boolean;
  }
  interface ProHeader extends JSXBase.HTMLAttributes<HTMLProHeaderElement> {}
  interface ProImage extends JSXBase.HTMLAttributes<HTMLProImageElement> {
    'alt'?: string;
    'src': string;
  }
  interface ProInput extends JSXBase.HTMLAttributes<HTMLProInputElement> {
    'label'?: string;
    'onInputChange'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    'regex'?: RegExp;
    'required'?: boolean;
  }
  interface ProLabel extends JSXBase.HTMLAttributes<HTMLProLabelElement> {
    'for': string;
  }
  interface ProList extends JSXBase.HTMLAttributes<HTMLProListElement> {}
  interface ProModal extends JSXBase.HTMLAttributes<HTMLProModalElement> {}
  interface ProRadio extends JSXBase.HTMLAttributes<HTMLProRadioElement> {
    'checked'?: boolean;
    'disabled'?: boolean;
    'name'?: string;
    'onProDeselect'?: (event: CustomEvent<any>) => void;
    'onProRadioDidLoad'?: (event: CustomEvent<void>) => void;
    'onProRadioDidUnload'?: (event: CustomEvent<void>) => void;
    'onProSelect'?: (event: CustomEvent<any>) => void;
    'onProStyle'?: (event: CustomEvent<any>) => void;
    'value': any | null;
  }
  interface ProRadioGroup extends JSXBase.HTMLAttributes<HTMLProRadioGroupElement> {
    'name': string;
    'value'?: string;
  }
  interface ProRow extends JSXBase.HTMLAttributes<HTMLProRowElement> {}

  interface IntrinsicElements {
    'pro-backdrop': ProBackdrop;
    'pro-button': ProButton;
    'pro-card': ProCard;
    'pro-checkbox': ProCheckbox;
    'pro-col': ProCol;
    'pro-component-demo': ProComponentDemo;
    'pro-content': ProContent;
    'pro-footer': ProFooter;
    'pro-grid': ProGrid;
    'pro-header': ProHeader;
    'pro-image': ProImage;
    'pro-input': ProInput;
    'pro-label': ProLabel;
    'pro-list': ProList;
    'pro-modal': ProModal;
    'pro-radio': ProRadio;
    'pro-radio-group': ProRadioGroup;
    'pro-row': ProRow;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


